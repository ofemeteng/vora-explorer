<h2 class="text-xl font-semibold text-gray-700 mb-6">Create Wallet</h2>
<form>
    <div class="mb-4">
        <label for="username" class="block text-sm font-medium text-gray-700 mb-2">Username</label>
        <input
            type="text"
            id="username"
            name="username"
            placeholder="Choose a unique username"
            class="w-full p-2 bg-gray-100 border border-gray-300 rounded-lg">
            <div id="error" class="mt-4 text-center text-sm text-red-600"></div>
            <div class="flex justify-between">
                <button
                    type="button"
                    class="bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded-full flex-1 mr-2"
                    hx-get="/"
                    hx-target="body"
                    hx-swap="innerHTML">
                    Back
                </button>
                <button
                    id="btnBegin"
                    type="button"
                    class="bg-gradient-to-br from-purple-500 to-indigo-600 hover:from-purple-600 hover:to-indigo-700 text-white font-bold
                        py-2 px-4 rounded-full flex-1 ml-2">
                    Continue
                </button>
            </div>
        </div>
    </form>
    <script>
        document.getElementById('btnBegin').addEventListener('click', async () => {
            const {startRegistration} = SimpleWebAuthnBrowser;
            const elemError = document.getElementById('error');
            elemError.innerHTML = '';
            const usernameInput = document.getElementById('username');
            const username = usernameInput.value.trim();
            if (! username) {
                elemError.innerHTML = 'Please enter a username';
                return;
            }
            const resp = await fetch('/generate-registration-options', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({username})
            });
            if (! resp.ok) {
                errorJSON = await resp.json();
                elemError.innerHTML = errorJSON.message;
                return
            }
            let asseResp;
            try {
                asseResp = await startRegistration(await resp.json());
            } catch (error) {
                if (error.name === 'InvalidStateError') {
                    elemError.innerText = 'Error: Authenticator was probably already registered by user';
                } else {
                    elemError.innerText = error;
                }
                throw error;
            }
            const verificationResp = await fetch('/verify-registration', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(asseResp)
            });
            const verificationJSON = await verificationResp.json();
            if (verificationJSON && verificationJSON.verified) {
                htmx.ajax('GET', '/home', {
                    target: '#main-content',
                    swap: 'innerHTML'
                });
            } else {
                elemError.innerHTML = `Oh no, something went wrong! Response: <pre>${
                    JSON.stringify(verificationJSON)
                }</pre>`;
            }
        });
    </script>